# Code Generated by Sidekick is for learning and experimentation purposes only.
name: Block Inactive Users

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  schedule:
    - cron: '0 0 * * *'  # Scheduled to run daily at midnight

jobs:
  block-inactive-users:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install axios dayjs

    - name: Create and run block inactive users script
      run: |
        echo "const axios = require('axios');" > block_inactive_users.js
        echo "const dayjs = require('dayjs');" >> block_inactive_users.js
        echo "" >> block_inactive_users.js
        echo "const AUTH0_DOMAIN = process.env.AUTH0_DOMAIN;" >> block_inactive_users.js
        echo "const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID;" >> block_inactive_users.js
        echo "const AUTH0_CLIENT_SECRET = process.env.AUTH0_CLIENT_SECRET;" >> block_inactive_users.js
        echo "" >> block_inactive_users.js
        echo "async function getAuth0Token() {" >> block_inactive_users.js
        echo "  const response = await axios.post(\`https://\${AUTH0_DOMAIN}/oauth/token\`, {" >> block_inactive_users.js
        echo "    client_id: AUTH0_CLIENT_ID," >> block_inactive_users.js
        echo "    client_secret: AUTH0_CLIENT_SECRET," >> block_inactive_users.js
        echo "    audience: \`https://\${AUTH0_DOMAIN}/api/v2/\`," >> block_inactive_users.js
        echo "    grant_type: 'client_credentials'" >> block_inactive_users.js
        echo "  }, {" >> block_inactive_users.js
        echo "    headers: { 'content-type': 'application/json' }" >> block_inactive_users.js
        echo "  });" >> block_inactive_users.js
        echo "  return response.data.access_token;" >> block_inactive_users.js
        echo "}" >> block_inactive_users.js
        echo "" >> block_inactive_users.js
        echo "async function blockInactiveUsers() {" >> block_inactive_users.js
        echo "  const token = await getAuth0Token();" >> block_inactive_users.js
        echo "  const headers = { Authorization: \`Bearer \${token}\` };" >> block_inactive_users.js
        echo "  const response = await axios.get(\`https://\${AUTH0_DOMAIN}/api/v2/users\`, { headers });" >> block_inactive_users.js
        echo "" >> block_inactive_users.js
        echo "  const users = response.data;" >> block_inactive_users.js
        echo "  for (const user of users) {" >> block_inactive_users.js
        echo "    const lastLogin = user.last_login;" >> block_inactive_users.js
        echo "    if (lastLogin) {" >> block_inactive_users.js
        echo "      const lastLoginDate = dayjs(lastLogin);" >> block_inactive_users.js
        echo "      const daysInactive = dayjs().diff(lastLoginDate, 'day');" >> block_inactive_users.js
        echo "      if (daysInactive > 4) {" >> block_inactive_users.js
        echo "        const userId = user.user_id;" >> block_inactive_users.js
        echo "        try {" >> block_inactive_users.js
        echo "          await axios.patch(\`https://\${AUTH0_DOMAIN}/api/v2/users/\${userId}\`, { blocked: true }, { headers });" >> block_inactive_users.js
        echo "          console.log(\`User \${userId} has been blocked due to inactivity.\`);" >> block_inactive_users.js
        echo "        } catch (error) {" >> block_inactive_users.js
        echo "          if (error.response && error.response.status === 429) {" >> block_inactive_users.js
        echo "            console.log('Rate limit exceeded, retrying after delay...');" >> block_inactive_users.js
        echo "            await new Promise(resolve => setTimeout(resolve, 10000)); // Wait for 10 seconds before retrying" >> block_inactive_users.js
        echo "            continue; // Retry the current user" >> block_inactive_users.js
        echo "          } else {" >> block_inactive_users.js
        echo "            console.error(\`Failed to block user \${userId}:\`, error);" >> block_inactive_users.js
        echo "          }" >> block_inactive_users.js
        echo "        }" >> block_inactive_users.js
        echo "      }" >> block_inactive_users.js
        echo "    }" >> block_inactive_users.js
        echo "    await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second between requests" >> block_inactive_users.js
        echo "  }" >> block_inactive_users.js
        echo "}" >> block_inactive_users.js
        echo "" >> block_inactive_users.js
        echo "blockInactiveUsers().catch(console.error);" >> block_inactive_users.js
      env:
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

    - name: Execute script
      run: node block_inactive_users.js
